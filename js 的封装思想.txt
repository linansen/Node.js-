http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html  封装的资料

核心书籍：Object-Oriented JavaScript
         Professional JavaScript for Web Developers, 2nd Edition
思想与应用安排如下： 
        讨论"封装"（Encapsulation），
        后面的第二部分和第三部分讨论"继承"（Inheritance）。
        
封装： 
     对于js的共识或者基础知识： 
     1: js 是一门基于j对象而不是面向对象object的语言。在你的周围世界里，描述任何事物都是对象。万物皆对象。但是跟标准的面向
        对象编程的语言相对而言，js充其量就是画个基于对象的语言。因为他没有class的概念。
解决方法：

    1:最原始的封装： 
       将一个对象具备的property组合成一个对象，例如cat：
       定我们把猫看成一个对象，它有"名字"和"颜色"两个属性。
　　   var Cat = {
　　　　name : '',
　　　　color : ''
　　   } 
     这就是个最原始的对象规格schema。
     现在，我们需要根据这个原型对象的规格（schema），生成两个实例对象。
　　  var cat1 = {}; // 创建一个空对象
　　　cat1.name = "大毛"; // 按照原型对象的属性赋值
　　　cat1.color = "黄色";
　　  var cat2 = {};
　　　cat2.name = "二毛";
　　  cat2.color = "黑色";
     好了，这就是最简单的封装了，把两个属性封装在一个对象里面。
     但是，这样的写法有两个缺点：
     一是如果多生成几个实例，写起来就非常麻烦；
     二是实例与原型之间，没有任何办法，可以看出有什么联系。
      
  2:   原始模式的改进 (写一个函数)
       减少重复代码出现
       function (name,color){//普通函数
         return {
            name:name,
            color:color
         }
       }
    优势： 减少代码重复出现
    缺点： 无法看到实际例子与原型之间的差别
  3:   持续改进
       构造函数（Constructor）模式
       function Cat(name ,color){//Constuctor 模式
         this.name=name;
         this.color=color;
       }
       所谓的构造函数就是个普通函数。但是内部使用了this关键字，一旦用new 出一个g对象，这个this就绑定这个
       对象。
       利用上面的Cat构造函数，可以创建不同的对象。
       我们现在就可以生成实例对象了。
　　   var cat1 = new Cat("大毛","黄色");
　　   var cat2 = new Cat("二毛","黑色");
       这个cat1 和 cat2 会自动含有一个constructor属性。该属性指向他们的构造函数。
       这个constructor属性在cat1或者cat2的prototype上。

                  ----color: "red"
                  ----name: "a"
                  ----Cat Prototype
                     ----||constructor: function(name ,color)
                              ----||arguments: null
                              ----||caller: null
                              ----||length: 2
                              ----||name: "Cat"
                              ----||prototype: Cat{}
                              ----||Function Prototype
                     ----||Object Prototype
                              ----||__defineGetter__(propertyName, getterFunction)
                              ----||__lookupGetter__(propertyName)
                              ----||__lookupSetter__(propertyName)
                              ----||constructor: function()
                              ----||hasOwnProperty(propertyName)
                              ----||isPrototypeOf(property)
                              ----||propertyIsEnumerable(propertyName)
                              ----||toLocaleString()
                              ----||toString()
                              ----||valueOf()
    这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。
　　alert(cat1.constructor == Cat); //true
　　alert(cat2.constructor == Cat); //true
  
   Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。
　　alert(cat1 instanceof Cat); //true
　　alert(cat2 instanceof Cat); //true
 
 四、构造函数模式的问题
    1: 浪费内存
    假如我们为Cat添加属性type和动作eat，那么Cat对象就变为
    function Cat(name,color)
    {
       this.name=name;
       this.color=color;
       this.type='猫科',
       this.eat=function(){
         console.log('eat some fisher..');
       }
    
    }
    这样如果我们用Cat实例化2个对象。每个对象里面都有独立的typea和eat这个动作。而且这两个属性d都是一样的。这样实例化多了
    对象，自然对内存的损耗变大。
    思考： 
         能不能在实例化后的每个cat对象里面相同内容的东西存放到一个对象里面？每个cat对象都指向该同个对象，这样在内存
         就只存在一个，不会出现内存损耗问题。
    答案：是可以的，利用prototype属性
    
  五：prototype
  对于每个构造函数，都有一个prototype属性，该属性指向一个对象。该对象里面都是这些事例的共同内容。这个prototype对象里面
  的内容都会被构造函数的实例所继承。
  
    
    
    
    
    
    
    
    
    
    
    
    
    
  
  
  
      
                              
   





















    
       
       
   
  
  
 

